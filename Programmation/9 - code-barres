# Code-Barres (150 points)
# A vous de jouer et décoder rapidement le message. ...
#
# Page du challenge : https://cyber-learning.fr/cyber-challenge/programmation/barcode/sujet.php?jeton=JETON
#
# Proposition de code par br0nson
# LinkedIn : t.ly/fra3R


import requests  # Pour faire des requêtes HTTP
from bs4 import BeautifulSoup  # Pour parser le HTML
import base64  # Pour décoder les images en base64
from PIL import Image  # Pour manipuler les images
from io import BytesIO  # Pour manipuler les données d'image en mémoire
from pyzbar.pyzbar import decode  # Pour décoder les codes-barres
from colorama import Fore, Style, init  # Pour la coloration du texte dans la console
import re  # Pour les expressions régulières
import sys  # Pour gérer les interruptions du script

# Initialisation de colorama
init(autoreset=True)

# URL de la page à scraper
url = 'https://cyber-learning.fr/cyber-challenge/programmation/barcode/sujet.php?jeton=JETON'

# Créer une session pour conserver les cookies et autres informations de session
session = requests.Session()

def main():
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("===================================")
    print("  Code-Barres")
    print("  Programmation - 150 points")
    print("")
    print("  Présenté par br0nson")
    print("  LinkedIn : t.ly/fra3R ")
    print("===================================")
    print("")

    print(f"{Fore.GREEN}Démarrage du script de scraping...{Style.RESET_ALL}")
    print("")

    try:
        # Récupérer le contenu de la page
        response = session.get(url)
        response.raise_for_status()  # Vérifie si la requête a réussi
        soup = BeautifulSoup(response.text, 'html.parser')

        # Trouver l'image du code-barres
        img_tag = soup.find('img')
        img_data = img_tag['src'].split(',')[1]  # Récupérer les données base64 de l'image

        # Décoder l'image base64
        img_bytes = base64.b64decode(img_data)
        img = Image.open(BytesIO(img_bytes))

        # Décoder le code-barres
        barcode_result = decode(img)
        if not barcode_result:
            raise ValueError("Code-barres non décodable")

        # Récupérer la valeur décodée du code-barres
        barcode_value = barcode_result[0].data.decode('utf-8')
        print(f"{Fore.BLUE}Code-barres décodé : {barcode_value}{Style.RESET_ALL}")

        # Préparer les données pour le formulaire
        form_data = {
            'barcode': barcode_value
        }

        # Soumettre le formulaire
        response = session.post(url, data=form_data)
        response.raise_for_status()  # Vérifie si la requête a réussi

        # Vérifier si le défi est réussi
        soup = BeautifulSoup(response.text, 'html.parser')
        text = soup.get_text()

        if "BRAVO" in text:
            print(f"{Fore.GREEN}Formulaire soumis avec succès.{Style.RESET_ALL}")
            match = re.search(r'BRAVO ! Vous pouvez utiliser ce code : \[(.*?)\]', text)
            if match:
                code = match.group(1)
                print(f"{Fore.CYAN}Code obtenu : {code}{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}Échec de l'affichage du code obtenu.{Style.RESET_ALL}")

    except requests.RequestException as e:
        print(f"{Fore.RED}Erreur lors de la requête HTTP : {e}{Style.RESET_ALL}")

    except ValueError as e:
        print(f"{Fore.RED}Erreur lors du traitement des données : {e}{Style.RESET_ALL}")

    except Exception as e:
        print(f"{Fore.RED}Erreur inattendue : {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Script interrompu par l'utilisateur.{Style.RESET_ALL}")
        sys.exit(0)
